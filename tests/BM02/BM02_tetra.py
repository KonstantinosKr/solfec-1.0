# UNIFORMLY DISTRIBUTED LOAD ON A CIRCULAR PLATE

def create_simulation (step, stop, outstep):
   Dir_out='out/tests/BM02_tetra_'+'step_'+str(step)+'s'
   GEOMETRIC_EPSILON (1E-5)
   
   solfec=SOLFEC ('QUASI_STATIC', step, Dir_out)

   Nodes_M1=[
         0.0000000E+00, 0.0000000E+00, 0.0000000E+00,
         0.0000000E+00, 0.1000000E+01, 0.0000000E+00,
         0.1000000E+01, 0.0000000E+00, 0.0000000E+00,
         0.0000000E+00, 0.1666670E+00, 0.0000000E+00,
         0.0000000E+00, 0.3333330E+00, 0.0000000E+00,
         0.0000000E+00, 0.5000000E+00, 0.0000000E+00,
         0.0000000E+00, 0.6666670E+00, 0.0000000E+00,
         0.0000000E+00, 0.8333330E+00, 0.0000000E+00,
         0.8333330E+00, 0.0000000E+00, 0.0000000E+00,
         0.6666670E+00, 0.0000000E+00, 0.0000000E+00,
         0.5000000E+00, 0.0000000E+00, 0.0000000E+00,
         0.3333330E+00, 0.0000000E+00, 0.0000000E+00,
         0.1666670E+00, 0.0000000E+00, 0.0000000E+00,
         0.1613560E+00, 0.9868960E+00, 0.0000000E+00,
         0.3269140E+00, 0.9450540E+00, 0.0000000E+00,
         0.4890420E+00, 0.8722600E+00, 0.0000000E+00,
         0.6391680E+00, 0.7690670E+00, 0.0000000E+00,
         0.7690670E+00, 0.6391680E+00, 0.0000000E+00,
         0.8722600E+00, 0.4890420E+00, 0.0000000E+00,
         0.9450540E+00, 0.3269140E+00, 0.0000000E+00,
         0.9868960E+00, 0.1613560E+00, 0.0000000E+00,
         0.1442640E+00, 0.5698860E+00, 0.0000000E+00,
         0.3095100E+00, 0.6320570E+00, 0.0000000E+00,
         0.4754730E+00, 0.7027010E+00, 0.0000000E+00,
         0.6880930E+00, 0.4935930E+00, 0.0000000E+00,
         0.6142240E+00, 0.3374120E+00, 0.0000000E+00,
         0.5537320E+00, 0.1592060E+00, 0.0000000E+00,
         0.2776070E+00, 0.4483740E+00, 0.0000000E+00,
         0.4135060E+00, 0.3045310E+00, 0.0000000E+00,
         0.1226660E+00, 0.4215900E+00, 0.0000000E+00,
         0.3597830E+00, 0.1200160E+00, 0.0000000E+00,
         0.1914610E+00, 0.2563590E+00, 0.0000000E+00,
         0.6112070E+00, 0.6220700E+00, 0.0000000E+00,
         0.4842310E+00, 0.5058200E+00, 0.0000000E+00,
         0.7682110E+00, 0.1932770E+00, 0.0000000E+00,
         0.7775680E+00, 0.3680470E+00, 0.0000000E+00,
         0.1558020E+00, 0.7506290E+00, 0.0000000E+00,
         0.3196830E+00, 0.8149330E+00, 0.0000000E+00,
         0.0000000E+00, 0.0000000E+00,-0.1000000E-01,
         0.0000000E+00, 0.1000000E+01,-0.1000000E-01,
         0.1000000E+01, 0.0000000E+00,-0.1000000E-01,
         0.0000000E+00, 0.1666670E+00,-0.1000000E-01,
         0.0000000E+00, 0.3333330E+00,-0.1000000E-01,
         0.0000000E+00, 0.5000000E+00,-0.1000000E-01,
         0.0000000E+00, 0.6666670E+00,-0.1000000E-01,
         0.0000000E+00, 0.8333330E+00,-0.1000000E-01,
         0.8333330E+00, 0.0000000E+00,-0.1000000E-01,
         0.6666670E+00, 0.0000000E+00,-0.1000000E-01,
         0.5000000E+00, 0.0000000E+00,-0.1000000E-01,
         0.3333330E+00, 0.0000000E+00,-0.1000000E-01,
         0.1666670E+00, 0.0000000E+00,-0.1000000E-01,
         0.1613560E+00, 0.9868960E+00,-0.1000000E-01,
         0.3269140E+00, 0.9450540E+00,-0.1000000E-01,
         0.4890420E+00, 0.8722600E+00,-0.1000000E-01,
         0.6391680E+00, 0.7690670E+00,-0.1000000E-01,
         0.7690670E+00, 0.6391680E+00,-0.1000000E-01,
         0.8722600E+00, 0.4890420E+00,-0.1000000E-01,
         0.9450540E+00, 0.3269140E+00,-0.1000000E-01,
         0.9868960E+00, 0.1613560E+00,-0.1000000E-01,
         0.1442640E+00, 0.5698860E+00,-0.1000000E-01,
         0.3095100E+00, 0.6320570E+00,-0.1000000E-01,
         0.4754730E+00, 0.7027010E+00,-0.1000000E-01,
         0.6880930E+00, 0.4935930E+00,-0.1000000E-01,
         0.6142240E+00, 0.3374120E+00,-0.1000000E-01,
         0.5537320E+00, 0.1592060E+00,-0.1000000E-01,
         0.2776070E+00, 0.4483740E+00,-0.1000000E-01,
         0.4135060E+00, 0.3045310E+00,-0.1000000E-01,
         0.1226660E+00, 0.4215900E+00,-0.1000000E-01,
         0.3597830E+00, 0.1200160E+00,-0.1000000E-01,
         0.1914610E+00, 0.2563590E+00,-0.1000000E-01,
         0.6112070E+00, 0.6220700E+00,-0.1000000E-01,
         0.4842310E+00, 0.5058200E+00,-0.1000000E-01,
         0.7682110E+00, 0.1932770E+00,-0.1000000E-01,
         0.7775680E+00, 0.3680470E+00,-0.1000000E-01,
         0.1558020E+00, 0.7506290E+00,-0.1000000E-01,
         0.3196830E+00, 0.8149330E+00,-0.1000000E-01,]
   #ELEM_TETRA4
   ############
   #ELEM_TETRA5
   ############
   #ELEM_TETRA6
   ############
   M54      = [6,     69,     41,     50,     31,      3,     12,      1]
   M55      = [6,     41,     38,     50,      3,      0,     12,      2]
   M56      = [6,     41,     69,     42,      3,     31,      4,      3]
   M57      = [6,     69,     67,     42,     31,     29,      4,      4]
   M58      = [6,     69,     50,     68,     31,     12,     30,      5]
   M59      = [6,     50,     49,     68,     12,     11,     30,      6]
   M60      = [6,     67,     69,     65,     29,     31,     27,      7]
   M61      = [6,     68,     66,     69,     30,     28,     31,      8]
   M62      = [6,     69,     66,     65,     31,     28,     27,      9]
   M63      = [6,     66,     68,     64,     28,     30,     26,     10]
   M64      = [6,     49,     48,     68,     11,     10,     30,     11]
   M65      = [6,     68,     48,     64,     30,     10,     26,     12]
   M66      = [6,     42,     67,     43,      4,     29,      5,     13]
   M67      = [6,     65,     59,     67,     27,     21,     29,     14]
   M68      = [6,     67,     59,     43,     29,     21,      5,     15]
   M69      = [6,     59,     65,     60,     21,     27,     22,     16]
   M70      = [6,     64,     63,     66,     26,     25,     28,     17]
   M71      = [6,     63,     62,     71,     25,     24,     33,     18]
   M72      = [6,     62,     70,     71,     24,     32,     33,     19]
   M73      = [6,     60,     71,     61,     22,     33,     23,     20]
   M74      = [6,     70,     61,     71,     32,     23,     33,     21]
   M75      = [6,     63,     71,     66,     25,     33,     28,     22]
   M76      = [6,     60,     65,     71,     22,     27,     33,     23]
   M77      = [6,     71,     65,     66,     33,     27,     28,     24]
   M78      = [6,     61,     70,     54,     23,     32,     16,     25]
   M79      = [6,     62,     55,     70,     24,     17,     32,     26]
   M80      = [6,     70,     55,     54,     32,     17,     16,     27]
   M81      = [6,     55,     62,     56,     17,     24,     18,     28]
   M82      = [6,     48,     47,     64,     10,      9,     26,     29]
   M83      = [6,     63,     72,     73,     25,     34,     35,     30]
   M84      = [6,     58,     57,     72,     20,     19,     34,     31]
   M85      = [6,     57,     73,     72,     19,     35,     34,     32]
   M86      = [6,     72,     46,     58,     34,      8,     20,     33]
   M87      = [6,     58,     46,     40,     20,      8,      2,     34]
   M88      = [6,     63,     73,     62,     25,     35,     24,     35]
   M89      = [6,     57,     56,     73,     19,     18,     35,     36]
   M90      = [6,     73,     56,     62,     35,     18,     24,     37]
   M91      = [6,     46,     72,     47,      8,     34,      9,     38]
   M92      = [6,     63,     64,     72,     25,     26,     34,     39]
   M93      = [6,     72,     64,     47,     34,     26,      9,     40]
   M94      = [6,     43,     59,     44,      5,     21,      6,     41]
   M95      = [6,     54,     53,     61,     16,     15,     23,     42]
   M96      = [6,     60,     75,     74,     22,     37,     36,     43]
   M97      = [6,     74,     75,     51,     36,     37,     13,     44]
   M98      = [6,     75,     52,     51,     37,     14,     13,     45]
   M99      = [6,     74,     51,     45,     36,     13,      7,     46]
   M100     = [6,     51,     39,     45,     13,      1,      7,     47]
   M101     = [6,     52,     75,     53,     14,     37,     15,     48]
   M102     = [6,     60,     61,     75,     22,     23,     37,     49]
   M103     = [6,     75,     61,     53,     37,     23,     15,     50]
   M104     = [6,     60,     74,     59,     22,     36,     21,     51]
   M105     = [6,     45,     44,     74,      7,      6,     36,     52]
   M106     = [6,     74,     44,     59,     36,      6,     21,     53]
   #ELEM_TETRA8
   ############
     #ELEM_TETRA4
     ############
     #ELEM_TETRA5
     ############
     #ELEM_TETRA6
     ############
   Mesh_M1 = M54      + \
           M55      + \
           M56      + \
           M57      + \
           M58      + \
           M59      + \
           M60      + \
           M61      + \
           M62      + \
           M63      + \
           M64      + \
           M65      + \
           M66      + \
           M67      + \
           M68      + \
           M69      + \
           M70      + \
           M71      + \
           M72      + \
           M73      + \
           M74      + \
           M75      + \
           M76      + \
           M77      + \
           M78      + \
           M79      + \
           M80      + \
           M81      + \
           M82      + \
           M83      + \
           M84      + \
           M85      + \
           M86      + \
           M87      + \
           M88      + \
           M89      + \
           M90      + \
           M91      + \
           M92      + \
           M93      + \
           M94      + \
           M95      + \
           M96      + \
           M97      + \
           M98      + \
           M99      + \
           M100     + \
           M101     + \
           M102     + \
           M103     + \
           M104     + \
           M105     + \
           M106    
           
   S199     = [53,  3,     31,      3,     12,     11]
   S200     = [     3,      3,      0,     12,     11]
   S201     = [     3,      3,     31,      4,     11]
   S202     = [     3,     31,     29,      4,     11]
   S203     = [     3,     31,     12,     30,     11]
   S204     = [     3,     12,     11,     30,     11]
   S205     = [     3,     29,     31,     27,     11]
   S206     = [     3,     30,     28,     31,     11]
   S207     = [     3,     31,     28,     27,     11]
   S208     = [     3,     28,     30,     26,     11]
   S209     = [     3,     11,     10,     30,     11]
   S210     = [     3,     30,     10,     26,     11]
   S211     = [     3,      4,     29,      5,     11]
   S212     = [     3,     27,     21,     29,     11]
   S213     = [     3,     29,     21,      5,     11]
   S214     = [     3,     21,     27,     22,     11]
   S215     = [     3,     26,     25,     28,     11]
   S216     = [     3,     25,     24,     33,     11]
   S217     = [     3,     24,     32,     33,     11]
   S218     = [     3,     22,     33,     23,     11]
   S219     = [     3,     32,     23,     33,     11]
   S220     = [     3,     25,     33,     28,     11]
   S221     = [     3,     22,     27,     33,     11]
   S222     = [     3,     33,     27,     28,     11]
   S223     = [     3,     23,     32,     16,     11]
   S224     = [     3,     24,     17,     32,     11]
   S225     = [     3,     32,     17,     16,     11]
   S226     = [     3,     17,     24,     18,     11]
   S227     = [     3,     10,      9,     26,     11]
   S228     = [     3,     25,     34,     35,     11]
   S229     = [     3,     20,     19,     34,     11]
   S230     = [     3,     19,     35,     34,     11]
   S231     = [     3,     34,      8,     20,     11]
   S232     = [     3,     20,      8,      2,     11]
   S233     = [     3,     25,     35,     24,     11]
   S234     = [     3,     19,     18,     35,     11]
   S235     = [     3,     35,     18,     24,     11]
   S236     = [     3,      8,     34,      9,     11]
   S237     = [     3,     25,     26,     34,     11]
   S238     = [     3,     34,     26,      9,     11]
   S239     = [     3,      5,     21,      6,     11]
   S240     = [     3,     16,     15,     23,     11]
   S241     = [     3,     22,     37,     36,     11]
   S242     = [     3,     36,     37,     13,     11]
   S243     = [     3,     37,     14,     13,     11]
   S244     = [     3,     36,     13,      7,     11]
   S245     = [     3,     13,      1,      7,     11]
   S246     = [     3,     14,     37,     15,     11]
   S247     = [     3,     22,     23,     37,     11]
   S248     = [     3,     37,     23,     15,     11]
   S249     = [     3,     22,     36,     21,     11]
   S250     = [     3,      7,      6,     36,     11]
   S251     = [     3,     36,      6,     21,     11]
   
   
    
   Surf_M1_INT = S199     + \
           S200     + \
           S201     + \
           S202     + \
           S203     + \
           S204     + \
           S205     + \
           S206     + \
           S207     + \
           S208     + \
           S209     + \
           S210     + \
           S211     + \
           S212     + \
           S213     + \
           S214     + \
           S215     + \
           S216     + \
           S217     + \
           S218     + \
           S219     + \
           S220     + \
           S221     + \
           S222     + \
           S223     + \
           S224     + \
           S225     + \
           S226     + \
           S227     + \
           S228     + \
           S229     + \
           S230     + \
           S231     + \
           S232     + \
           S233     + \
           S234     + \
           S235     + \
           S236     + \
           S237     + \
           S238     + \
           S239     + \
           S240     + \
           S241     + \
           S242     + \
           S243     + \
           S244     + \
           S245     + \
           S246     + \
           S247     + \
           S248     + \
           S249     + \
           S250     + \
           S251       
           
   bulk = BULK_MATERIAL (solfec,
                         model = 'KIRCHHOFF',
                         young = 62.8E+09,
                         poisson = 0.3,
                         density = 7.850E+03)
   
   Msh_M1 = MESH(Nodes_M1,Mesh_M1,Surf_M1_INT)
   
   Msh_M2 = MESH(Nodes_M1,Mesh_M1,1)
   
   Mesh_final = Msh_M1
   
   Node=[]
   for i in Mesh_final.nodes_on_surface(11):
     Node.append(Mesh_final.node(i))
     
   Point_A=Mesh_final.node(0)
   
   FIX123=[]  
   FIX123.append(Mesh_final.node(1))
   FIX123.append(Mesh_final.node(2))
   FIX123.append(Mesh_final.node(13))
   FIX123.append(Mesh_final.node(14))
   FIX123.append(Mesh_final.node(15))
   FIX123.append(Mesh_final.node(16))
   FIX123.append(Mesh_final.node(17))
   FIX123.append(Mesh_final.node(18))
   FIX123.append(Mesh_final.node(19))
   FIX123.append(Mesh_final.node(20))
   
   FIX12=[]  
   FIX12.append(Mesh_final.node(0))
   
   FIX1=[]  
   FIX1.append(Mesh_final.node(3))
   FIX1.append(Mesh_final.node(4))
   FIX1.append(Mesh_final.node(5))
   FIX1.append(Mesh_final.node(6))
   FIX1.append(Mesh_final.node(7))
   
   FIX2=[]  
   FIX2.append(Mesh_final.node(8))
   FIX2.append(Mesh_final.node(9))
   FIX2.append(Mesh_final.node(10))
   FIX2.append(Mesh_final.node(11))
   FIX2.append(Mesh_final.node(12))
   
   Bod_M1 = BODY (solfec, 'FINITE_ELEMENT',Mesh_final,bulk)
   
   data =[]
   time=[]
   vite=[]
   st=step
   n=int(stop/step)*2 #stop/step
   for i in range (1, n):
     x=i*st
     time.append(x)
     y=1E-20
     vite.append(y)  
     
   for (tt,vv) in zip (time,vite):
   	data += [tt,vv]
      
   Serie = TIME_SERIES (data)
   
   for i in range (0,len(Node)):
     DISPLAY_POINT (Bod_M1, Node[i], 'N%d'%i) # press 'D' in the viewer to see display points
   
   for fix in FIX123:
     FIX_POINT (Bod_M1,fix)
   
   Fix_direc_Y=(0.,1.,0.)
   for fix in FIX2:
     FIX_DIRECTION (Bod_M1, fix, Fix_direc_Y)
   
   Fix_direc_X=(1.,0.,0.)
   for fix in FIX1:
     FIX_DIRECTION (Bod_M1, fix, Fix_direc_X)
     
   for fix in FIX12:
     FIX_DIRECTION (Bod_M1, fix, Fix_direc_X)
     FIX_DIRECTION (Bod_M1, fix, Fix_direc_Y)  
   
   P=1.E+03  #N/m2
   surface=11
   PRESSURE (Bod_M1, surface, -P)
   
   gs = GAUSS_SEIDEL_SOLVER (1E-6 , 1000, 1E-6)  
   nt = NEWTON_SOLVER (1E-11, locdyn = 'OFF')
   OUTPUT (solfec, outstep)
   if not VIEWER() and solfec.mode == 'WRITE':
     solfec.verbose = '%'
   RUN (solfec, nt, stop)
   return solfec

# data
step = 5E-3
stop = 1.0
outstep = 5E-2

# calculate
solfec = create_simulation (step, stop, outstep)

# read results
if not VIEWER():
  solfec = create_simulation (step, stop, outstep)
  if solfec.mode != 'READ':
    print 'READ ERROR'
    import sys
    sys.exit(1)

  body = solfec.bodies[0]
  mesh = body.mesh
  A = mesh.node(0)
  SEEK (solfec, stop)
  disp = DISPLACEMENT (body, A)
 
  Value = abs(disp[2])
  Code_Aster_Ref = 4.28E-04

  if abs(Value-Code_Aster_Ref) < 0.01E-4:
    print '\b\b\b\bPASSED'
  else:
    print '\b\b\b\bFAILED', 
    print '(Computed displacement was %g' % Value, 'while reference is %g)' % Code_Aster_Ref
