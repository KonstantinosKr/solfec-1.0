# UNIFORMLY DISTRIBUTED LOAD ON A CIRCULAR PLATE

def create_simulation (step, stop, outstep):
  Dir_out='out/tests/BM02_hexa_'+'step_'+str(step)+'s'
  GEOMETRIC_EPSILON (1E-5)
  
  solfec=SOLFEC ('QUASI_STATIC', step, Dir_out)

  Nodes_M1=[
        0.0000000E+00, 0.0000000E+00, 0.0000000E+00,
        0.0000000E+00, 0.1000000E+01, 0.0000000E+00,
        0.1000000E+01, 0.0000000E+00, 0.0000000E+00,
        0.0000000E+00, 0.1428570E+00, 0.0000000E+00,
        0.0000000E+00, 0.2857140E+00, 0.0000000E+00,
        0.0000000E+00, 0.4285710E+00, 0.0000000E+00,
        0.0000000E+00, 0.5714290E+00, 0.0000000E+00,
        0.0000000E+00, 0.7142860E+00, 0.0000000E+00,
        0.0000000E+00, 0.8571430E+00, 0.0000000E+00,
        0.8333330E+00, 0.0000000E+00, 0.0000000E+00,
        0.6666670E+00, 0.0000000E+00, 0.0000000E+00,
        0.5000000E+00, 0.0000000E+00, 0.0000000E+00,
        0.3333330E+00, 0.0000000E+00, 0.0000000E+00,
        0.1666670E+00, 0.0000000E+00, 0.0000000E+00,
        0.1736480E+00, 0.9848080E+00, 0.0000000E+00,
        0.3420200E+00, 0.9396930E+00, 0.0000000E+00,
        0.5000000E+00, 0.8660250E+00, 0.0000000E+00,
        0.6427880E+00, 0.7660440E+00, 0.0000000E+00,
        0.7660440E+00, 0.6427880E+00, 0.0000000E+00,
        0.8660250E+00, 0.5000000E+00, 0.0000000E+00,
        0.9396930E+00, 0.3420200E+00, 0.0000000E+00,
        0.9848080E+00, 0.1736480E+00, 0.0000000E+00,
        0.8063260E+00, 0.1584160E+00, 0.0000000E+00,
        0.6404150E+00, 0.1483370E+00, 0.0000000E+00,
        0.4794180E+00, 0.1430040E+00, 0.0000000E+00,
        0.3197460E+00, 0.1411990E+00, 0.0000000E+00,
        0.1600120E+00, 0.1415440E+00, 0.0000000E+00,
        0.1536400E+00, 0.2820920E+00, 0.0000000E+00,
        0.1483330E+00, 0.4208370E+00, 0.0000000E+00,
        0.1456790E+00, 0.5575950E+00, 0.0000000E+00,
        0.1480170E+00, 0.6936430E+00, 0.0000000E+00,
        0.1574880E+00, 0.8331680E+00, 0.0000000E+00,
        0.7667780E+00, 0.3115350E+00, 0.0000000E+00,
        0.6092680E+00, 0.2918400E+00, 0.0000000E+00,
        0.4575280E+00, 0.2823960E+00, 0.0000000E+00,
        0.3062340E+00, 0.2801850E+00, 0.0000000E+00,
        0.2940350E+00, 0.4149920E+00, 0.0000000E+00,
        0.2863860E+00, 0.5443750E+00, 0.0000000E+00,
        0.2889140E+00, 0.6694590E+00, 0.0000000E+00,
        0.3082930E+00, 0.7970500E+00, 0.0000000E+00,
        0.7118430E+00, 0.4537720E+00, 0.0000000E+00,
        0.5723770E+00, 0.4249750E+00, 0.0000000E+00,
        0.4352160E+00, 0.4144420E+00, 0.0000000E+00,
        0.4169400E+00, 0.5353340E+00, 0.0000000E+00,
        0.4129780E+00, 0.6426820E+00, 0.0000000E+00,
        0.4447580E+00, 0.7458490E+00, 0.0000000E+00,
        0.5332070E+00, 0.5397200E+00, 0.0000000E+00,
        0.6422130E+00, 0.5784800E+00, 0.0000000E+00,
        0.5577660E+00, 0.6776070E+00, 0.0000000E+00,
        0.5013170E+00, 0.6200030E+00, 0.0000000E+00,
        0.0000000E+00, 0.0000000E+00,-0.1000000E-01,
        0.0000000E+00, 0.1000000E+01,-0.1000000E-01,
        0.1000000E+01, 0.0000000E+00,-0.1000000E-01,
        0.0000000E+00, 0.1428570E+00,-0.1000000E-01,
        0.0000000E+00, 0.2857140E+00,-0.1000000E-01,
        0.0000000E+00, 0.4285710E+00,-0.1000000E-01,
        0.0000000E+00, 0.5714290E+00,-0.1000000E-01,
        0.0000000E+00, 0.7142860E+00,-0.1000000E-01,
        0.0000000E+00, 0.8571430E+00,-0.1000000E-01,
        0.8333330E+00, 0.0000000E+00,-0.1000000E-01,
        0.6666670E+00, 0.0000000E+00,-0.1000000E-01,
        0.5000000E+00, 0.0000000E+00,-0.1000000E-01,
        0.3333330E+00, 0.0000000E+00,-0.1000000E-01,
        0.1666670E+00, 0.0000000E+00,-0.1000000E-01,
        0.1736480E+00, 0.9848080E+00,-0.1000000E-01,
        0.3420200E+00, 0.9396930E+00,-0.1000000E-01,
        0.5000000E+00, 0.8660250E+00,-0.1000000E-01,
        0.6427880E+00, 0.7660440E+00,-0.1000000E-01,
        0.7660440E+00, 0.6427880E+00,-0.1000000E-01,
        0.8660250E+00, 0.5000000E+00,-0.1000000E-01,
        0.9396930E+00, 0.3420200E+00,-0.1000000E-01,
        0.9848080E+00, 0.1736480E+00,-0.1000000E-01,
        0.8063260E+00, 0.1584160E+00,-0.1000000E-01,
        0.6404150E+00, 0.1483370E+00,-0.1000000E-01,
        0.4794180E+00, 0.1430040E+00,-0.1000000E-01,
        0.3197460E+00, 0.1411990E+00,-0.1000000E-01,
        0.1600120E+00, 0.1415440E+00,-0.1000000E-01,
        0.1536400E+00, 0.2820920E+00,-0.1000000E-01,
        0.1483330E+00, 0.4208370E+00,-0.1000000E-01,
        0.1456790E+00, 0.5575950E+00,-0.1000000E-01,
        0.1480170E+00, 0.6936430E+00,-0.1000000E-01,
        0.1574880E+00, 0.8331680E+00,-0.1000000E-01,
        0.7667780E+00, 0.3115350E+00,-0.1000000E-01,
        0.6092680E+00, 0.2918400E+00,-0.1000000E-01,
        0.4575280E+00, 0.2823960E+00,-0.1000000E-01,
        0.3062340E+00, 0.2801850E+00,-0.1000000E-01,
        0.2940350E+00, 0.4149920E+00,-0.1000000E-01,
        0.2863860E+00, 0.5443750E+00,-0.1000000E-01,
        0.2889140E+00, 0.6694590E+00,-0.1000000E-01,
        0.3082930E+00, 0.7970500E+00,-0.1000000E-01,
        0.7118430E+00, 0.4537720E+00,-0.1000000E-01,
        0.5723770E+00, 0.4249750E+00,-0.1000000E-01,
        0.4352160E+00, 0.4144420E+00,-0.1000000E-01,
        0.4169400E+00, 0.5353340E+00,-0.1000000E-01,
        0.4129780E+00, 0.6426820E+00,-0.1000000E-01,
        0.4447580E+00, 0.7458490E+00,-0.1000000E-01,
        0.5332070E+00, 0.5397200E+00,-0.1000000E-01,
        0.6422130E+00, 0.5784800E+00,-0.1000000E-01,
        0.5577660E+00, 0.6776070E+00,-0.1000000E-01,
        0.5013170E+00, 0.6200030E+00,-0.1000000E-01,]
  
  #ELEM_TETRA4
  ############
  #ELEM_TETRA5
  ############
  #ELEM_TETRA6
  ############
  #ELEM_TETRA8
  ############
  M39      = [8,     53,     50,     63,     76,      3,      0,     13,     26,      1]
  M40      = [8,     51,     58,     81,     64,      1,      8,     31,     14,      2]
  M41      = [8,     72,     59,     52,     71,     22,      9,      2,     21,      3]
  M42      = [8,     54,     53,     76,     77,      4,      3,     26,     27,      4]
  M43      = [8,     55,     54,     77,     78,      5,      4,     27,     28,      5]
  M44      = [8,     56,     55,     78,     79,      6,      5,     28,     29,      6]
  M45      = [8,     57,     56,     79,     80,      7,      6,     29,     30,      7]
  M46      = [8,     58,     57,     80,     81,      8,      7,     30,     31,      8]
  M47      = [8,     73,     60,     59,     72,     23,     10,      9,     22,      9]
  M48      = [8,     74,     61,     60,     73,     24,     11,     10,     23,     10]
  M49      = [8,     75,     62,     61,     74,     25,     12,     11,     24,     11]
  M50      = [8,     76,     63,     62,     75,     26,     13,     12,     25,     12]
  M51      = [8,     64,     81,     89,     65,     14,     31,     39,     15,     13]
  M52      = [8,     65,     89,     95,     66,     15,     39,     45,     16,     14]
  M53      = [8,     66,     95,     98,     67,     16,     45,     48,     17,     15]
  M54      = [8,     98,     97,     68,     67,     48,     47,     18,     17,     16]
  M55      = [8,     97,     90,     69,     68,     47,     40,     19,     18,     17]
  M56      = [8,     90,     82,     70,     69,     40,     32,     20,     19,     18]
  M57      = [8,     82,     72,     71,     70,     32,     22,     21,     20,     19]
  M58      = [8,     83,     73,     72,     82,     33,     23,     22,     32,     20]
  M59      = [8,     84,     74,     73,     83,     34,     24,     23,     33,     21]
  M60      = [8,     85,     75,     74,     84,     35,     25,     24,     34,     22]
  M61      = [8,     77,     76,     75,     85,     27,     26,     25,     35,     23]
  M62      = [8,     78,     77,     85,     86,     28,     27,     35,     36,     24]
  M63      = [8,     79,     78,     86,     87,     29,     28,     36,     37,     25]
  M64      = [8,     80,     79,     87,     88,     30,     29,     37,     38,     26]
  M65      = [8,     81,     80,     88,     89,     31,     30,     38,     39,     27]
  M66      = [8,     91,     83,     82,     90,     41,     33,     32,     40,     28]
  M67      = [8,     92,     84,     83,     91,     42,     34,     33,     41,     29]
  M68      = [8,     86,     85,     84,     92,     36,     35,     34,     42,     30]
  M69      = [8,     87,     86,     92,     93,     37,     36,     42,     43,     31]
  M70      = [8,     88,     87,     93,     94,     38,     37,     43,     44,     32]
  M71      = [8,     89,     88,     94,     95,     39,     38,     44,     45,     33]
  M72      = [8,     96,     91,     90,     97,     46,     41,     40,     47,     34]
  M73      = [8,     93,     92,     91,     96,     43,     42,     41,     46,     35]
  M74      = [8,     94,     93,     96,     99,     44,     43,     46,     49,     36]
  M75      = [8,     95,     94,     99,     98,     45,     44,     49,     48,     37]
  M76      = [8,     99,     96,     97,     98,     49,     46,     47,     48,     38]
    #ELEM_TETRA4
    ############
    #ELEM_TETRA5
    ############
    #ELEM_TETRA6
    ############
    #ELEM_TETRA8
    ############
  Mesh_M1 = M39      + \
          M40      + \
          M41      + \
          M42      + \
          M43      + \
          M44      + \
          M45      + \
          M46      + \
          M47      + \
          M48      + \
          M49      + \
          M50      + \
          M51      + \
          M52      + \
          M53      + \
          M54      + \
          M55      + \
          M56      + \
          M57      + \
          M58      + \
          M59      + \
          M60      + \
          M61      + \
          M62      + \
          M63      + \
          M64      + \
          M65      + \
          M66      + \
          M67      + \
          M68      + \
          M69      + \
          M70      + \
          M71      + \
          M72      + \
          M73      + \
          M74      + \
          M75      + \
          M76   
          
  S199     = [38,  4,      3,      0,     13,     26,     11]
  S200     = [     4,      1,      8,     31,     14,     11]
  S201     = [     4,     22,      9,      2,     21,     11]
  S202     = [     4,      4,      3,     26,     27,     11]
  S203     = [     4,      5,      4,     27,     28,     11]
  S204     = [     4,      6,      5,     28,     29,     11]
  S205     = [     4,      7,      6,     29,     30,     11]
  S206     = [     4,      8,      7,     30,     31,     11]
  S207     = [     4,     23,     10,      9,     22,     11]
  S208     = [     4,     24,     11,     10,     23,     11]
  S209     = [     4,     25,     12,     11,     24,     11]
  S210     = [     4,     26,     13,     12,     25,     11]
  S211     = [     4,     14,     31,     39,     15,     11]
  S212     = [     4,     15,     39,     45,     16,     11]
  S213     = [     4,     16,     45,     48,     17,     11]
  S214     = [     4,     48,     47,     18,     17,     11]
  S215     = [     4,     47,     40,     19,     18,     11]
  S216     = [     4,     40,     32,     20,     19,     11]
  S217     = [     4,     32,     22,     21,     20,     11]
  S218     = [     4,     33,     23,     22,     32,     11]
  S219     = [     4,     34,     24,     23,     33,     11]
  S220     = [     4,     35,     25,     24,     34,     11]
  S221     = [     4,     27,     26,     25,     35,     11]
  S222     = [     4,     28,     27,     35,     36,     11]
  S223     = [     4,     29,     28,     36,     37,     11]
  S224     = [     4,     30,     29,     37,     38,     11]
  S225     = [     4,     31,     30,     38,     39,     11]
  S226     = [     4,     41,     33,     32,     40,     11]
  S227     = [     4,     42,     34,     33,     41,     11]
  S228     = [     4,     36,     35,     34,     42,     11]
  S229     = [     4,     37,     36,     42,     43,     11]
  S230     = [     4,     38,     37,     43,     44,     11]
  S231     = [     4,     39,     38,     44,     45,     11]
  S232     = [     4,     46,     41,     40,     47,     11]
  S233     = [     4,     43,     42,     41,     46,     11]
  S234     = [     4,     44,     43,     46,     49,     11]
  S235     = [     4,     45,     44,     49,     48,     11]
  S236     = [     4,     49,     46,     47,     48,     11]
  
  Surf_M1_INT = S199     + \
          S200     + \
          S201     + \
          S202     + \
          S203     + \
          S204     + \
          S205     + \
          S206     + \
          S207     + \
          S208     + \
          S209     + \
          S210     + \
          S211     + \
          S212     + \
          S213     + \
          S214     + \
          S215     + \
          S216     + \
          S217     + \
          S218     + \
          S219     + \
          S220     + \
          S221     + \
          S222     + \
          S223     + \
          S224     + \
          S225     + \
          S226     + \
          S227     + \
          S228     + \
          S229     + \
          S230     + \
          S231     + \
          S232     + \
          S233     + \
          S234     + \
          S235     + \
          S236     
          
  bulk = BULK_MATERIAL (solfec,
                        model = 'KIRCHHOFF',
                        young = 62.80E+09,  #Kpa
                        poisson = 0.3,
                        density = 7.850E+03)
  
  Msh_M1 = MESH(Nodes_M1,Mesh_M1,Surf_M1_INT)
  
  Msh_M2 = MESH(Nodes_M1,Mesh_M1,1)
  
  Mesh_final = Msh_M1
  
  Node=[]
  for i in Mesh_final.nodes_on_surface(11):
    Node.append(Mesh_final.node(i))
    
  Point_A=Mesh_final.node(0)
  
  FIX123=[]  
  FIX123.append(Mesh_final.node(1))
  FIX123.append(Mesh_final.node(2))
  FIX123.append(Mesh_final.node(14))
  FIX123.append(Mesh_final.node(15))
  FIX123.append(Mesh_final.node(16))
  FIX123.append(Mesh_final.node(17))
  FIX123.append(Mesh_final.node(18))
  FIX123.append(Mesh_final.node(19))
  FIX123.append(Mesh_final.node(20))
  FIX123.append(Mesh_final.node(21))
  
  FIX12=[]  
  FIX12.append(Mesh_final.node(0))
  
  FIX1=[]  
  FIX1.append(Mesh_final.node(3))
  FIX1.append(Mesh_final.node(4))
  FIX1.append(Mesh_final.node(5))
  FIX1.append(Mesh_final.node(6))
  FIX1.append(Mesh_final.node(7))
  FIX1.append(Mesh_final.node(8))
  
  FIX2=[]  
  FIX2.append(Mesh_final.node(9))
  FIX2.append(Mesh_final.node(10))
  FIX2.append(Mesh_final.node(11))
  FIX2.append(Mesh_final.node(12))
  FIX2.append(Mesh_final.node(13))
  
  Bod_M1 = BODY (solfec, 'FINITE_ELEMENT',Mesh_final,bulk)
  
  data =[]
  time=[]
  vite=[]
  st=step
  n=int(stop/step)*2 #stop/step
  for i in range (1, n):
    x=i*st
    time.append(x)
    y=1E-20
    vite.append(y)  
    
  for (tt,vv) in zip (time,vite):
  	data += [tt,vv]
     
  Serie = TIME_SERIES (data)
  
  for i in range (0,len(Node)):
    DISPLAY_POINT (Bod_M1, Node[i], 'N%d'%i) # press 'D' in the viewer to see display points
  
  for fix in FIX123:
    FIX_POINT (Bod_M1,fix)
  
  Fix_direc_Y=(0.,1.,0.)
  for fix in FIX2:
    FIX_DIRECTION (Bod_M1, fix, Fix_direc_Y)
  
    
  Fix_direc_X=(1.,0.,0.)
  for fix in FIX1:
    FIX_DIRECTION (Bod_M1, fix, Fix_direc_X)
    
  for fix in FIX12:
    FIX_DIRECTION (Bod_M1, fix, Fix_direc_X)
    FIX_DIRECTION (Bod_M1, fix, Fix_direc_Y)  
  
  P=1E+03 # kN/m2 .0E+04  #N/m2  INITIAL 1000 N/m2
  surface=11
  PRESSURE (Bod_M1, surface, -P)
  
  gs= GAUSS_SEIDEL_SOLVER (1E-3 , 1000)
  gs_imp= GAUSS_SEIDEL_SOLVER (1E-6 , 1000, 1E-6)  
  nt = NEWTON_SOLVER ()
  nt_imp= NEWTON_SOLVER (1E-9, 1000, delta = 1E-6)
  OUTPUT (solfec, outstep)
  if not VIEWER() and solfec.mode == 'WRITE':
    solfec.verbose = '%'
  RUN (solfec, gs_imp, stop)
  return solfec

# data
step = 5E-3
stop = 1.0
outstep = 5E-2

# calculate
solfec = create_simulation (step, stop, outstep)

# read results
if not VIEWER():
  solfec = create_simulation (step, stop, outstep)
  if solfec.mode != 'READ':
    print 'READ ERROR'
    import sys
    sys.exit(1)

  body = solfec.bodies[0]
  mesh = body.mesh
  A = mesh.node(0)
  SEEK (solfec, stop)
  disp = DISPLACEMENT (body, A)
 
  Value = abs(disp[2])
  Code_Aster_Ref = 3.02E-03

  if abs(Value-Code_Aster_Ref) < 0.1E-3:
    print '\b\b\b\bPASSED'
  else:
    print '\b\b\b\bFAILED', 
    print '(Computed displacement was %g' % Value, 'while reference is %g)' % Code_Aster_Ref
